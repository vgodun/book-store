name: Deploy Backend Service

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      container_name:
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY_PROD:
        required: true
      AWS_REGION:
        required: true
      AWS_ROLE_TO_ASSUME:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      EC2_HOST_PROD:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug SSH Key Availability
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY_PROD }}" ]; then
            echo "❌ SSH_PRIVATE_KEY_PROD secret is empty or not set"
            exit 1
          else
            echo "✅ SSH_PRIVATE_KEY_PROD secret is available"
            echo "Key length: $(echo '${{ secrets.SSH_PRIVATE_KEY_PROD }}' | wc -c)"
          fi

      - name: Setup SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          known_hosts: 'placeholder'
          name: id_rsa
          if_key_exists: replace
        continue-on-error: true
        id: ssh_setup

      - name: Setup SSH Key (Fallback)
        if: steps.ssh_setup.outcome == 'failure'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST_PROD }} >> ~/.ssh/known_hosts
          echo "✅ SSH key setup completed using fallback method"

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ inputs.image_name }}:$IMAGE_TAG ${{ inputs.dockerfile_path }}
          docker tag ${{ inputs.image_name }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ inputs.image_name }}:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ inputs.image_name }}:$IMAGE_TAG

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST_PROD }} << 'EOF'
            IMAGE_TAG=${{ github.sha }}
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ inputs.image_name }}:$IMAGE_TAG
            sed -i '/${{ inputs.container_name }}:/,/image:/s|image: .*|image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ inputs.image_name }}:$IMAGE_TAG|g' docker-compose.yml
            if [ "$(docker ps -q -f name=${{ inputs.container_name }})" ]; then
              docker-compose stop ${{ inputs.container_name }}
            fi
            docker-compose up -d ${{ inputs.container_name }}
          EOF
