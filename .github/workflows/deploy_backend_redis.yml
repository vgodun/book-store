name: Deploy Backend Service

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      container_name:
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY_PROD:
        required: true
      AWS_REGION:
        required: true
      AWS_ROLE_TO_ASSUME:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      EC2_HOST_PROD:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check SSH Key Secret
        run: |
          if [ -n "${{ secrets.SSH_PRIVATE_KEY_PROD }}" ]; then
            echo "‚úÖ SSH key secret is available"
          else
            echo "‚ùå SSH_PRIVATE_KEY_PROD secret is missing or empty!"
            echo "Please add the SSH private key to repository secrets"
            exit 1
          fi

      - name: Setup SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          known_hosts: 'placeholder'
          name: id_rsa
          if_key_exists: replace
        continue-on-error: true
        id: ssh_setup

      - name: Setup SSH Key (Fallback)
        if: steps.ssh_setup.outcome == 'failure'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST_PROD }} >> ~/.ssh/known_hosts
          echo "‚úÖ SSH key setup completed using fallback method"

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ inputs.image_name }}:$IMAGE_TAG ${{ inputs.dockerfile_path }}
          docker tag ${{ inputs.image_name }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ inputs.image_name }}:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ inputs.image_name }}:$IMAGE_TAG

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ec2-user@${{ secrets.EC2_HOST_PROD }} << 'EOF'
            IMAGE_TAG="${{ github.sha }}"
            CONTAINER_NAME="${{ inputs.container_name }}"
            
            # Set environment variables for docker-compose
            export AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export IMAGE_TAG="$IMAGE_TAG"
            
            echo "üöÄ Deploying with IMAGE_TAG: $IMAGE_TAG"
            echo "üì¶ Container: $CONTAINER_NAME"
            echo "üñºÔ∏è Image: ${{ inputs.image_name }}"
            
            # Debug: Show current docker-compose.yml before changes
            echo "üìã Current docker-compose.yml:"
            cat docker-compose.yml
            
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ inputs.image_name }}:$IMAGE_TAG
            
            # Update .env file FIRST to ensure environment variables are available
            echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" > .env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
            echo "IMAGE_TAG=$IMAGE_TAG" >> .env
            
            echo "üìÅ .env file contents:"
            cat .env
            
            # Use envsubst for more reliable variable substitution
            if command -v envsubst >/dev/null 2>&1; then
              echo "üîÑ Using envsubst to replace variables..."
              envsubst < docker-compose.yml > docker-compose.tmp && mv docker-compose.tmp docker-compose.yml
            else
              echo "‚ö†Ô∏è envsubst not available, using sed..."
              # Fallback to sed with more specific pattern
              sed -i "s|\${AWS_ACCOUNT_ID}|${{ secrets.AWS_ACCOUNT_ID }}|g" docker-compose.yml
              sed -i "s|\${AWS_REGION}|${{ secrets.AWS_REGION }}|g" docker-compose.yml
              sed -i "s|\${IMAGE_TAG}|$IMAGE_TAG|g" docker-compose.yml
            fi
            
            # Debug: Show docker-compose.yml after changes
            echo "üìã Updated docker-compose.yml:"
            cat docker-compose.yml
            
            # Test docker-compose config
            echo "üß™ Testing docker-compose configuration:"
            docker-compose config || echo "‚ùå Docker-compose config validation failed"
            
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
              echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $CONTAINER_NAME –ø—Ä–∞—Ü—é—î. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ..."
              docker-compose stop $CONTAINER_NAME || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—É–ø–∏–Ω–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $CONTAINER_NAME"
              docker-compose up -d $CONTAINER_NAME || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $CONTAINER_NAME"
            else
              echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $CONTAINER_NAME –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π. –ó–∞–ø—É—Å–∫–∞—î–º–æ..."
              docker-compose up -d $CONTAINER_NAME || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $CONTAINER_NAME"
            fi
            
            echo "‚úÖ Deployment completed for $CONTAINER_NAME with tag $IMAGE_TAG"
          EOF
          rm /tmp/ssh_key