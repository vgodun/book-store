name: Deploy Backend Service

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      container_name:
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY_PROD:
        required: true
      AWS_REGION:
        required: true
      AWS_ROLE_TO_ASSUME:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      EC2_HOST_PROD:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check SSH Key Secret
        run: |
          if [ -n "${{ secrets.SSH_PRIVATE_KEY_PROD }}" ]; then
            echo "✅ SSH key secret is available"
          else
            echo "❌ SSH_PRIVATE_KEY_PROD secret is missing or empty!"
            echo "Please add the SSH private key to repository secrets"
            exit 1
          fi

      - name: Setup SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          known_hosts: 'placeholder'
          name: id_rsa
          if_key_exists: replace
        continue-on-error: true
        id: ssh_setup

      - name: Setup SSH Key (Fallback)
        if: steps.ssh_setup.outcome == 'failure'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST_PROD }} >> ~/.ssh/known_hosts
          echo "✅ SSH key setup completed using fallback method"

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ inputs.image_name }}:$IMAGE_TAG ${{ inputs.dockerfile_path }}
          docker tag ${{ inputs.image_name }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ inputs.image_name }}:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ inputs.image_name }}:$IMAGE_TAG

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ec2-user@${{ secrets.EC2_HOST_PROD }} << 'EOF'
            IMAGE_TAG="${{ github.sha }}"
            CONTAINER_NAME="${{ inputs.container_name }}"
            
            # Set environment variables for docker-compose
            export AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export IMAGE_TAG="$IMAGE_TAG"
            
            echo "🚀 Deploying with IMAGE_TAG: $IMAGE_TAG"
            echo "📦 Container: $CONTAINER_NAME"
            echo "🖼️ Image: ${{ inputs.image_name }}"
            
            # Debug: Show current docker-compose.yml before changes
            echo "📋 Current docker-compose.yml:"
            cat docker-compose.yml
            
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ inputs.image_name }}:$IMAGE_TAG
            
            echo "🔍 Getting latest tag from ECR for ${{ inputs.image_name }}..."
            LATEST_TAG=$(aws ecr describe-images --repository-name ${{ inputs.image_name }} --region ${{ secrets.AWS_REGION }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
            echo "📌 Latest tag from ECR: $LATEST_TAG"
            echo "📌 Just pushed tag: $IMAGE_TAG"
            
            echo "🔄 Updating docker-compose.yml IMAGE_TAG for backend_redis service only"
            
            # Replace IMAGE_TAG only in the backend_redis service section
            sed -i "/backend_redis:/,/frontend:/s|\${IMAGE_TAG}|$LATEST_TAG|g" docker-compose.yml
            
            echo "📋 Updated docker-compose.yml:"
            cat docker-compose.yml
            
            echo "🧪 Testing docker compose configuration:"
            docker compose config || echo "❌ Docker compose config validation failed"
            
            echo "🛑 Stopping existing services (if any)..."
            docker compose down --remove-orphans || echo "No existing services to stop"
            
            echo "🚀 Starting all services with docker compose..."
            docker compose up -d
            
            # Wait a bit for services to start
            echo "⏱️ Waiting for services to start..."
            sleep 10
            
            echo "📊 Checking service status:"
            docker compose ps
            
            echo "🔍 Detailed status check:"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
            
            echo "🔍 Checking if $CONTAINER_NAME is running:"
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
              echo "✅ Container $CONTAINER_NAME is running successfully"
              echo "📋 Recent logs for $CONTAINER_NAME:"
              docker compose logs $CONTAINER_NAME --tail=10
            else
              echo "❌ Container $CONTAINER_NAME failed to start"
              echo "📋 Full logs for $CONTAINER_NAME:"
              docker compose logs $CONTAINER_NAME --tail=50
              echo "🔍 Docker events for troubleshooting:"
              docker events --since=2m --until=now
            fi
            
            echo "✅ Deployment completed for $CONTAINER_NAME with tag $IMAGE_TAG"
          EOF
          rm /tmp/ssh_key